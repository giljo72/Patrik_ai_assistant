name: Sync Individual Files to Google Drive

on:
  push:
    branches:
      - main  # or your default branch
  workflow_dispatch:  # Allows manual triggering

jobs:
  upload-to-drive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Google API client
        run: |
          pip install google-auth google-api-python-client
      
      - name: Sync files to Google Drive
        run: |
          # Save credentials from GitHub secret
          echo "${{ secrets.DRIVE_CREDENTIALS }}" | base64 -d > service_account.json
          
          # Create and run Python script to sync files
          python - << 'EOF'
          import os
          import fnmatch
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          # Setup credentials and Drive API client
          SCOPES = ['https://www.googleapis.com/auth/drive']
          credentials = service_account.Credentials.from_service_account_file('service_account.json', scopes=SCOPES)
          drive_service = build('drive', 'v3', credentials=credentials)
          
          # Target Google Drive folder ID
          folder_id = '${{ secrets.DRIVE_FOLDER_ID }}'
          
          # Patterns to exclude
          exclude_patterns = ['.git*', 'service_account.json']
          
          # Keep track of folder IDs
          folder_ids = {'.': folder_id}
          
          def should_exclude(path):
              """Check if path should be excluded from sync."""
              for pattern in exclude_patterns:
                  if fnmatch.fnmatch(path, pattern):
                      return True
              return False
          
          def get_or_create_folder(folder_name, parent_id):
              """Get or create a folder in Drive and return its ID."""
              if folder_name in folder_ids:
                  return folder_ids[folder_name]
                  
              # Check if folder exists
              query = f"name = '{folder_name}' and '{parent_id}' in parents and mimeType = 'application/vnd.google-apps.folder' and trashed = false"
              results = drive_service.files().list(q=query, fields="files(id, name)").execute()
              items = results.get('files', [])
              
              if items:
                  # Use existing folder
                  folder_id = items[0]['id']
              else:
                  # Create new folder
                  file_metadata = {
                      'name': folder_name,
                      'mimeType': 'application/vnd.google-apps.folder',
                      'parents': [parent_id]
                  }
                  folder = drive_service.files().create(body=file_metadata, fields='id').execute()
                  folder_id = folder.get('id')
                  print(f"Created folder: {folder_name}")
              
              folder_ids[folder_name] = folder_id
              return folder_id
          
          def upload_file(file_path, parent_id):
              """Upload a file to Google Drive. If it exists, update it."""
              file_name = os.path.basename(file_path)
