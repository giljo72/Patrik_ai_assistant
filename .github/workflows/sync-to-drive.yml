name: Sync to Google Drive

on:
  push:
    branches:
      - main  # or your default branch
  workflow_dispatch:  # Allows manual triggering

jobs:
  upload-to-drive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # First, upload zip file as before (this part works)
      - name: Upload to Google Drive as zip
        uses: Jodebu/upload-to-drive@master
        with:
          target: .
          credentials: ${{ secrets.DRIVE_CREDENTIALS }}
          folder: ${{ secrets.DRIVE_FOLDER_ID }}
      
      # Now, add steps to extract the files
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Google API client
        run: |
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client
      
      - name: Extract files in Drive folder
        run: |
          echo "${{ secrets.DRIVE_CREDENTIALS }}" | base64 -d > service_account.json
          python - << 'EOF'
          import json
          import os
          from googleapiclient.discovery import build
          from google.oauth2 import service_account

          # Load credentials
          SCOPES = ['https://www.googleapis.com/auth/drive']
          credentials = service_account.Credentials.from_service_account_file('service_account.json', scopes=SCOPES)
          drive_service = build('drive', 'v3', credentials=credentials)

          # Get the most recent zip file in the folder
          folder_id = '${{ secrets.DRIVE_FOLDER_ID }}'
          
          # Find all zip files in the folder
          results = drive_service.files().list(
              q=f"'{folder_id}' in parents and mimeType contains 'application/zip' and trashed = false",
              orderBy="createdTime desc",
              pageSize=1,
              fields="files(id, name)"
          ).execute()
          
          files = results.get('files', [])
          if not files:
              print("No zip files found in folder")
              exit(0)
              
          # Get the most recent zip file
          zip_file_id = files[0]['id']
          zip_file_name = files[0]['name']
          print(f"Found zip file: {zip_file_name}")
          
          # Create a subfolder with repository name
          repo_name = os.environ.get('GITHUB_REPOSITORY', '').split('/')[-1]
          if not repo_name:
              repo_name = 'github-files'
              
          # Check if the folder already exists
          results = drive_service.files().list(
              q=f"'{folder_id}' in parents and name = '{repo_name}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false",
              fields="files(id, name)"
          ).execute()
          
          folders = results.get('files', [])
          if folders:
              repo_folder_id = folders[0]['id']
              print(f"Using
